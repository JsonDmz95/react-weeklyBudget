{"version":3,"sources":["components/Error.js","components/Question.js","components/Form.js","components/Expense.js","components/List.js","helpers.js","components/Budget.js","App.js","serviceWorker.js","index.js"],"names":["Error","message","className","Question","addBudget","updateRemaining","updateQuestion","useState","budget","updateBudget","error","saveError","onSubmit","e","preventDefault","isNaN","type","step","placeholder","onChange","parseFloat","target","value","toFixed","readOnly","Form","addNewExpense","saveCreateExpense","title","amount","expense","saveExpense","trim","id","shortid","generate","document","getElementById","focus","Expense","List","expenses","map","key","reviewBudget","remaining","Budget","App","question","updateExpenses","createExpense","useEffect","remainingBudget","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","console"],"mappings":"2NAWeA,EARD,SAAC,GAAD,IAAEC,EAAF,EAAEA,QAAF,OACZ,uBAAGC,UAAU,4BAA4BD,IC+D5BE,EA/DE,SAAC,GAAkD,IAAjDC,EAAgD,EAAhDA,UAAWC,EAAqC,EAArCA,gBAAiBC,EAAoB,EAApBA,eAAoB,EAGlCC,mBAAS,GAHyB,mBAG1DC,EAH0D,KAGlDC,EAHkD,OAItCF,oBAAS,GAJ6B,mBAI1DG,EAJ0D,KAInDC,EAJmD,KA4BjE,OACE,kBAAC,WAAD,KACE,gDAECD,EAAQ,kBAAC,EAAD,CAAOT,QAAQ,uCAAyC,KAEjE,0BACEW,SAvBe,SAAAC,GACnBA,EAAEC,iBAGCN,EAAS,GAAKO,MAAMP,GACrBG,GAAU,IAKZA,GAAU,GACVP,EAAUI,GACVH,EAAgBG,GAChBF,GAAe,MAYX,2BACEU,KAAK,SACLC,KAAK,OACLf,UAAU,eACVgB,YAAY,4BACZC,SAnCa,SAAAN,GACnBJ,EAAaW,WAAWP,EAAEQ,OAAOC,MAAO,IAAIC,QAAQ,OAqChD,2BACEP,KAAK,SACLd,UAAU,8BACVoB,MAAM,aACNE,UAAU,O,uBCwCLC,EAxFF,SAAC,GAAwC,IAAvCC,EAAsC,EAAtCA,cAAeC,EAAuB,EAAvBA,kBAAuB,EAEpBpB,mBAAS,CACtCqB,MAAO,GACPC,OAAQ,IAJyC,mBAE5CC,EAF4C,KAEnCC,EAFmC,KAM7CH,EAAiBE,EAAjBF,MAAOC,EAAUC,EAAVD,OANsC,EAQxBtB,oBAAS,GARe,mBAQ5CG,EAR4C,KAQrCC,EARqC,KAoCnD,OACE,0BAAMC,SA1BW,SAAAC,GACjBA,EAAEC,iBAGCe,EAAS,GAAKd,MAAMc,IAA4B,KAAjBD,EAAMI,OACtCrB,GAAU,IAGZA,GAAU,GAGVmB,EAAQG,GAAKC,IAAQC,WAGrBT,EAAcI,GACdH,GAAkB,GAGlBI,EAAY,CACVH,MAAO,GACPC,OAAQ,IAEVO,SAASC,eAAe,SAASC,WAK/B,mDAEC5B,EAAQ,kBAAC,EAAD,CAAOT,QAAQ,8EAAsE,KAE9F,yBAAKC,UAAU,cACb,iDACA,2BACE+B,GAAG,QACHjB,KAAK,OACLd,UAAU,eACVgB,YAAY,kBACZI,MAAOM,EACPT,SAAY,SAAAN,GAAC,OAAIkB,EAAY,2BACtBD,GADqB,IAExBF,MAAOf,EAAEQ,OAAOC,aAKxB,yBAAKpB,UAAU,cACb,kDACA,2BACEc,KAAK,SACLC,KAAK,OACLf,UAAU,eACVgB,YAAY,WACZI,MAAOO,EACPV,SAAW,SAAAN,GAAC,OAAIkB,EAAY,2BACvBD,GADsB,IAEzBD,OAAQT,WAAWP,EAAEQ,OAAOC,MAAO,WAKzC,2BACEN,KAAK,SACLd,UAAU,8BACVoB,MAAM,iBACNE,UAAU,MChEHe,EAdC,SAAC,GAAD,IAAGT,EAAH,EAAGA,QAAH,OACd,wBAAI5B,UAAU,YACZ,2BACG4B,EAAQF,MAET,0BAAM1B,UAAU,WAAhB,KAA6B4B,EAAQD,OAAON,QAAQ,OCS3CiB,EAbF,SAAC,GAAD,IAAGC,EAAH,EAAGA,SAAH,OACX,yBAAKvC,UAAU,qBACb,oCACCuC,EAASC,KAAI,SAACZ,GAAD,OACZ,kBAAC,EAAD,CAASa,IAAKb,EAAQG,GAAIH,QAASA,SCR5Bc,EAAe,SAACpC,EAAQqC,GAWnC,OARGrC,EAAO,EAAIqC,EACA,qBACJrC,EAAO,EAAIqC,EACP,sBAEA,uBCcDC,EAlBA,SAAC,GAAyB,IAAxBtC,EAAuB,EAAvBA,OAAQqC,EAAe,EAAfA,UACvB,OACI,kBAAC,WAAD,KACE,yBAAK3C,UAAU,uBAAf,aACaM,GAEb,yBAAKN,UAAW0C,EAAapC,EAAQqC,IAArC,gBACgBA,KCgETE,MArEf,WAAe,MAEexC,mBAAS,GAFxB,mBAENC,EAFM,KAEEJ,EAFF,OAGwBG,mBAAS,GAHjC,mBAGNsC,EAHM,KAGKxC,EAHL,OAIsBE,oBAAS,GAJ/B,mBAINyC,EAJM,KAII1C,EAJJ,OAKsBC,mBAAS,IAL/B,mBAKNkC,EALM,KAKIQ,EALJ,OAMoB1C,mBAAS,IAN7B,mBAMNuB,EANM,KAMGJ,EANH,OAO8BnB,oBAAS,GAPvC,mBAON2C,EAPM,KAOSvB,EAPT,KAgCb,OAtBAwB,qBAAU,WACR,GAAGD,EAAc,CACfD,EAAe,GAAD,mBACTR,GADS,CAEZX,KAGF,IAAMsB,EAAkBP,EAAYf,EAAQD,OAC5CxB,EAAgB+C,GAEhBzB,GAAkB,MAEnB,CAACG,EAASoB,EAAeD,EAAgBR,EAAUI,EAAWlB,IAW/D,yBAAKzB,UAAU,aACb,gCACE,8CAEF,yBAAKA,UAAU,wBACZ8C,EACC,kBAAC,EAAD,CACE5C,UAAWA,EACXC,gBAAiBA,EACjBC,eAAgBA,IAGlB,yBAAKJ,UAAU,OACb,yBAAKA,UAAU,mBACb,kBAAC,EAAD,CACEwB,cAAeA,EACfC,kBAAmBA,KAGvB,yBAAKzB,UAAU,mBACb,kBAAC,EAAD,CACEuC,SAAUA,IAGZ,kBAAC,EAAD,CACEjC,OAAQY,WAAWZ,GACnBqC,UAAWzB,WAAWyB,UCrDlBQ,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFxB,SAASC,eAAe,SDyHpB,kBAAmBwB,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAzD,GACL0D,QAAQ1D,MAAMA,EAAMT,c","file":"static/js/main.2d4608fe.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst Error = ({message}) =>  (\r\n  <p className=\"alert alert-danger error\">{message}</p>\r\n);\r\n\r\nError.propTypes = {\r\n  message: PropTypes.string.isRequired\r\n}\r\n \r\nexport default Error;","import React, {Fragment, useState} from 'react';\r\nimport Error from \"./Error\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst Question = ({addBudget, updateRemaining, updateQuestion}) => {\r\n\r\n  //define Question State \r\n  const [budget, updateBudget] = useState(0);\r\n  const [error, saveError] = useState(false);\r\n\r\n  //define saveBudget\r\n  const handleChange = e => {\r\n    updateBudget(parseFloat(e.target.value, 10).toFixed(2));\r\n  }\r\n\r\n  //Submitt to set budget\r\n  const handleSubmit = e => {\r\n    e.preventDefault();\r\n\r\n    //validation\r\n    if(budget < 1 || isNaN(budget)){\r\n      saveError(true);\r\n      return;\r\n    }\r\n\r\n    //validation PASSED\r\n    saveError(false);\r\n    addBudget(budget);\r\n    updateRemaining(budget);\r\n    updateQuestion(false);\r\n  }\r\n\r\n  return ( \r\n    <Fragment>\r\n      <h2>Type your budget</h2>\r\n\r\n      {error ? <Error message=\"The budget must be more than $1 :(\"/> : null}\r\n\r\n      <form\r\n        onSubmit={handleSubmit}\r\n      >\r\n        <input \r\n          type=\"number\"\r\n          step=\"0.01\"\r\n          className=\"u-full-width\"\r\n          placeholder=\"Typer your budget here...\"\r\n          onChange={handleChange}\r\n        />\r\n\r\n        <input \r\n          type=\"Submit\"\r\n          className=\"button-primary u-full-width\"\r\n          value=\"Set Budget\"\r\n          readOnly={true}\r\n        />\r\n      </form>\r\n    </Fragment>\r\n   );\r\n}\r\n\r\nQuestion.propTypes = {\r\n  addBudget: PropTypes.func.isRequired,\r\n  updateRemaining: PropTypes.func.isRequired,\r\n  updateQuestion: PropTypes.func.isRequired,\r\n}\r\n \r\n \r\nexport default Question;","import React, {useState} from 'react';\r\nimport Error from \"./Error\";\r\nimport shortid from 'shortid';\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst Form = ({addNewExpense, saveCreateExpense}) => {\r\n\r\n  const [expense, saveExpense] = useState({\r\n    title: \"\",\r\n    amount: 0\r\n  });\r\n  const{title, amount} = expense;\r\n\r\n  const [error, saveError] = useState(false);\r\n\r\n  //Executed when the user add a new expense\r\n  const addExpense = e => {\r\n    e.preventDefault();\r\n\r\n    // Validation\r\n    if(amount < 1 || isNaN(amount) || title.trim() === ''){\r\n      saveError(true);\r\n      return;\r\n    }\r\n    saveError(false);\r\n\r\n    //Asign ID\r\n    expense.id = shortid.generate();\r\n\r\n    //send exprense to app\r\n    addNewExpense(expense);\r\n    saveCreateExpense(true);\r\n\r\n    //clean form\r\n    saveExpense({\r\n      title: \"\",\r\n      amount: 0\r\n    });\r\n    document.getElementById(\"title\").focus();\r\n  }\r\n\r\n  return ( \r\n    <form onSubmit={addExpense}>\r\n      <h2>Track your expenses</h2>\r\n\r\n      {error ? <Error message=\"The expense need a name and the ammount must be more than $1 ðŸ¤”\"/> : null}\r\n\r\n      <div className=\"form-group\">\r\n        <label>Expense title:</label>\r\n        <input \r\n          id=\"title\"\r\n          type=\"text\"\r\n          className=\"u-full-width\"\r\n          placeholder=\"Ex.: Restaurant\"\r\n          value={title}\r\n          onChange = {e => saveExpense({\r\n              ...expense,\r\n              title: e.target.value\r\n          })}\r\n        />\r\n      </div>\r\n\r\n      <div className=\"form-group\">\r\n        <label>Expense amount:</label>\r\n        <input \r\n          type=\"number\"\r\n          step=\"0.01\"\r\n          className=\"u-full-width\"\r\n          placeholder=\"Ex.: 300\"\r\n          value={amount}\r\n          onChange= {e => saveExpense({\r\n            ...expense,\r\n            amount: parseFloat(e.target.value, 10)\r\n        })}\r\n        />\r\n      </div>\r\n\r\n      <input \r\n        type=\"submit\"\r\n        className=\"button-primary u-full-width\"\r\n        value=\"Submit Expense\"\r\n        readOnly={true}\r\n      />\r\n    </form>\r\n   );\r\n}\r\n\r\nForm.propTypes = {\r\n  addNewExpense: PropTypes.func.isRequired,\r\n  saveCreateExpense: PropTypes.func.isRequired\r\n}\r\n \r\n \r\nexport default Form;","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst Expense = ({ expense }) => (\r\n  <li className=\"expenses\">\r\n    <p>\r\n      {expense.title}\r\n\r\n      <span className=\"expense\">$ {expense.amount.toFixed(2)}</span>\r\n    </p>\r\n  </li>\r\n);\r\n\r\nExpense.propTypes = {\r\n  expense: PropTypes.object.isRequired\r\n}\r\n\r\nexport default Expense;\r\n","import React from \"react\";\r\nimport Expense from \"./Expense\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst List = ({ expenses }) => (\r\n  <div className=\"incurred-expenses\">\r\n    <h2>List</h2>\r\n    {expenses.map((expense) => (\r\n      <Expense key={expense.id} expense={expense} />\r\n    ))}\r\n  </div>\r\n);\r\n\r\nList.propTypes = {\r\n  expenses: PropTypes.array.isRequired\r\n}\r\n\r\nexport default List;\r\n","export const reviewBudget = (budget, remaining) =>{\r\n  let classname;\r\n\r\n  if(budget/4 > remaining){\r\n    classname = \"alert alert-danger\"\r\n  } else if(budget/2 > remaining){\r\n    classname = \"alert alert-warning\"\r\n  } else{\r\n    classname = \"alert alert-success\"\r\n  }\r\n\r\n  return classname;\r\n}","import React, {Fragment} from 'react';\r\nimport {reviewBudget} from '../helpers';\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst Budget = ({budget, remaining}) => {\r\n  return ( \r\n      <Fragment>\r\n        <div className=\"alert alert-primary\">\r\n          Budget: $ {budget}\r\n        </div>\r\n        <div className={reviewBudget(budget, remaining)}>\r\n          Remaining: $ {remaining}\r\n        </div>\r\n      </Fragment>\r\n   );\r\n}\r\n\r\nBudget.propTypes = {\r\n  budget: PropTypes.number.isRequired,\r\n  remaining: PropTypes.number.isRequired\r\n}\r\n \r\nexport default Budget;","import React, { useState, useEffect } from \"react\";\nimport Question from \"./components/Question\";\nimport Form from \"./components/Form\";\nimport List from \"./components/List\";\nimport Budget from \"./components/Budget\";\n\nfunction App() {\n  //define state\n  const [budget, addBudget] = useState(0);\n  const [remaining, updateRemaining] = useState(0);\n  const [question, updateQuestion] = useState(true);\n  const [expenses, updateExpenses] = useState([]);\n  const [expense, addNewExpense] = useState({});\n  const [createExpense, saveCreateExpense] = useState(false);\n\n  // useEffect tha updates reaming\n  useEffect(() => {\n    if(createExpense){\n      updateExpenses([\n        ...expenses,\n        expense\n      ]);\n\n      const remainingBudget = remaining - expense.amount;\n      updateRemaining(remainingBudget);\n\n      saveCreateExpense(false);\n    }\n  }, [expense, createExpense, updateExpenses, expenses, remaining, saveCreateExpense]);\n\n  //Add a new expense\n  // const addNewExpense = (expense) =>{\n  //   updateExpenses([\n  //     ...expenses,\n  //     expense\n  //   ]);\n  // }\n\n  return (\n    <div className=\"container\">\n      <header>\n        <h1>Weekly Budget</h1>\n      </header>\n      <div className=\"content main-content\">\n        {question ? (\n          <Question\n            addBudget={addBudget}\n            updateRemaining={updateRemaining}\n            updateQuestion={updateQuestion}\n          />\n        ) : (\n          <div className=\"row\">\n            <div className=\"one-half column\">\n              <Form \n                addNewExpense={addNewExpense}\n                saveCreateExpense={saveCreateExpense}\n              />\n            </div>\n            <div className=\"one-half column\">\n              <List \n                expenses={expenses}\n              />\n\n              <Budget \n                budget={parseFloat(budget)}\n                remaining={parseFloat(remaining)}\n              />\n            </div>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}